import { useTranslation } from "react-i18next";
import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Check } from "lucide-react";
import { Link } from "wouter";

type ServiceCardProps = {
  icon: React.ReactNode;
  title: string;
  description: string;
  features: string[];
  ctaText: string;
  ctaLink: string;
};

const ServiceCard = ({ icon, title, description, features, ctaText, ctaLink }: ServiceCardProps) => {
  return (
    <Card className="bg-white dark:bg-gray-800 rounded-xl shadow-card hover:shadow-card-hover transition-shadow border border-gray-100 dark:border-gray-700 overflow-hidden">
      <CardContent className="p-6">
        <div className="mb-4 text-primary dark:text-primary">
          {icon}
        </div>
        <h3 className="font-montserrat font-semibold text-xl mb-3 text-primary-dark dark:text-primary">{title}</h3>
        <p className="text-gray-600 dark:text-gray-300 mb-4">{description}</p>
        <div className="space-y-3 mb-6">
          {features.map((feature, index) => (
            <div key={index} className="flex items-center">
              <Check className="text-green-500 dark:text-green-400 mr-2 h-4 w-4" />
              <span className="text-sm text-gray-600 dark:text-gray-300">{feature}</span>
            </div>
          ))}
        </div>
        <Button asChild className="w-full">
          <Link href={ctaLink}>
            {ctaText}
          </Link>
        </Button>
      </CardContent>
    </Card>
  );
};

export default function Services() {
  const { t } = useTranslation();
  
  const services = [
    {
      icon: <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
      </svg>,
      title: t("services.individual.title"),
      description: t("services.individual.description"),
      features: [
        t("services.individual.feature1"),
        t("services.individual.feature2"),
        t("services.individual.feature3")
      ],
      ctaText: t("services.individual.cta"),
      ctaLink: "/counseling"
    },
    {
      icon: <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
      </svg>,
      title: t("services.group.title"),
      description: t("services.group.description"),
      features: [
        t("services.group.feature1"),
        t("services.group.feature2"),
        t("services.group.feature3")
      ],
      ctaText: t("services.group.cta"),
      ctaLink: "/group-sessions"
    },
    {
      icon: <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
      </svg>,
      title: t("services.meditation.title"),
      description: t("services.meditation.description"),
      features: [
        t("services.meditation.feature1"),
        t("services.meditation.feature2"),
        t("services.meditation.feature3")
      ],
      ctaText: t("services.meditation.cta"),
      ctaLink: "/meditation"
    },
    {
      icon: <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2m-3 7h3m-3 4h3m-6-4h.01M9 16h.01" />
      </svg>,
      title: t("services.tools.title"),
      description: t("services.tools.description"),
      features: [
        t("services.tools.feature1"),
        t("services.tools.feature2"),
        t("services.tools.feature3")
      ],
      ctaText: t("services.tools.cta"),
      ctaLink: "/mood-tracker"
    },
    {
      icon: <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
      </svg>,
      title: t("services.ai.title"),
      description: t("services.ai.description"),
      features: [
        t("services.ai.feature1"),
        t("services.ai.feature2"),
        t("services.ai.feature3")
      ],
      ctaText: t("services.ai.cta"),
      ctaLink: "/#chat"
    },
    {
      icon: <svg xmlns="http://www.w3.org/2000/svg" className="h-8 w-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z" />
      </svg>,
      title: t("services.medication.title"),
      description: t("services.medication.description"),
      features: [
        t("services.medication.feature1"),
        t("services.medication.feature2"),
        t("services.medication.feature3")
      ],
      ctaText: t("services.medication.cta"),
      ctaLink: "/medicine"
    }
  ];
  
  return (
    <section id="services" className="py-20 px-4 md:px-8 bg-white dark:bg-gray-900">
      <div className="container mx-auto max-w-6xl">
        <div className="text-center mb-16">
          <h2 className="font-montserrat font-bold text-3xl md:text-4xl text-primary-dark dark:text-primary mb-4">{t("services.title")}</h2>
          <p className="text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">{t("services.description")}</p>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {services.map((service, index) => (
            <ServiceCard
              key={index}
              icon={service.icon}
              title={service.title}
              description={service.description}
              features={service.features}
              ctaText={service.ctaText}
              ctaLink={service.ctaLink}
            />
          ))}
        </div>
      </div>
    </section>
  );
}
